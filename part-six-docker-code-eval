<!DOCTYPE html>
<html>

  <head>
  
    <title>Microservices with Docker, Flask, and React - Docker Code Eval</title>
  
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="shortcut icon" type="image/png" href="/favicon.ico">
  <link
    rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css"
  >
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/icon?family=Material+Icons"
  >
  <link
    rel="stylesheet"
    href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
  >
  <link
    href="//fonts.googleapis.com/css?family=Merriweather:900,900italic,300,300italic"
    rel="stylesheet"
    type="text/css"
  >
  <link
    href="//fonts.googleapis.com/css?family=Lato:900,300"
    rel="stylesheet"
    type="text/css"
  >
  <link
    href="https://fonts.googleapis.com/css?family=Montserrat"
    rel="stylesheet"
    type="text/css"
  >
  <link
    href="//cdn-images.mailchimp.com/embedcode/classic-10_7.css"
    rel="stylesheet"
    type="text/css"
  >
  <link href="/assets/css/styles.css?1513951242487265000" rel="stylesheet">
  <script
    src="//code.jquery.com/jquery-2.2.4.min.js"
    integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
    crossorigin="anonymous"
  ></script>
  <script
    type="text/javascript"
    src="/assets/js/main.js"
  ></script>
  <script
    type="text/javascript"
    src="https://gumroad.com/js/gumroad.js"
  ></script>
</head>


  <body>

    <nav class="indigo darken-4">
  <div class="nav-wrapper">
    <a href="/" class="nav-logo-container left">
      <img
        class="nav-logo" src="/assets/img/test_driven_io_full_logo_white_text.svg" alt="testdriven.io"
      />
    </a>
    <a href="/" class="brand-logo main-brand-logo center show-on-large hide-on-med-and-down">
      Test Driven Development Courses
    </a>
    <!-- <a href="/" class="brand-logo main-brand-logo hide-on-large-only">
      TDD Courses
    </a> -->
    <a href="#" data-activates="mobile-demo" class="right button-collapse"><i class="material-icons">menu</i></a>
    <ul class="right hide-on-med-and-down">
      <li><a href="/course-contents">Contents</a></li>
      <li><a href="/version-two">Version 2.1</a></li>
    </ul>
    <ul class="side-nav" id="mobile-demo">
      <li><a href="/">Home</a></li>
      <li><a href="/course-contents">Contents</a></li>
      <li><a href="/version-two">Version 2</a></li>
    </ul>
  </div>
</nav>


    <br>

    <div class="container">
      <div class="row">

        <div class="col m3 hide-on-small-and-down">
  <br>
  <div id="toc-block" class="collection hide-on-small-and-down">
    <ul class="collapsible collapsible-accordion">
      
        
          <li>
            <h5 data-part="1" class="collapsible-header  waves-effect waves-teal">
              Part 1
            </h5>
            <div class="collapsible-body">
        
        <ul>
          <li class="collection-li">
            <span>1.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-intro"
              >Introduction</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>2.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-getting-started"
              >Getting Started</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>3.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-docker-config"
              >Docker Config</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>4.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-postgres-setup"
              >Postgres Setup</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>5.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-test-setup"
              >Test Setup</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>6.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-flask-blueprints"
              >Flask Blueprints</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>7.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-restful-routes"
              >RESTful Routes</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>8.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-aws-deployment"
              >Deployment</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>9.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-jinja-templates"
              >Jinja Templates</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>10.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-one-workflow"
              >Workflow</a>
            </span>
          </li>
        </ul>
      
        
          <li>
            <h5 data-part="2" class="collapsible-header  waves-effect waves-teal">
              Part 2
            </h5>
            <div class="collapsible-body">
        
        <ul>
          <li class="collection-li">
            <span>1.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-intro"
              >Introduction</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>2.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-project-refactor"
              >Project Refactor</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>3.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-code-coverage"
              >Code Coverage</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>4.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-continuous-integration"
              >Continuous Integration</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>5.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-react-setup"
              >React Setup</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>6.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-flask-deployment"
              >Flask Deployment</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>7.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-react-forms"
              >React Forms</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>8.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-react-docker"
              >React and Docker</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>9.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-two-flask-refactor"
              >Flask Refactor</a>
            </span>
          </li>
        </ul>
      
        
          <li>
            <h5 data-part="3" class="collapsible-header  waves-effect waves-teal">
              Part 3
            </h5>
            <div class="collapsible-body">
        
        <ul>
          <li class="collection-li">
            <span>1.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-intro"
              >Introduction</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>2.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-flask-migrate"
              >Flask Migrate</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>3.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-flask-bcrypt"
              >Flask Bcrypt</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>4.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-jwt-setup"
              >JWT Setup</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>5.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-auth-routes"
              >Auth Routes</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>6.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-react-router"
              >React Router</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>7.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-react-bootstrap"
              >React Bootstrap</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>8.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-react-authentication"
              >React Authentication</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>9.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-authorization"
              >Authorization</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>10.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-update-component"
              >Update Component</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>11.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-three-update-docker"
              >Update Docker</a>
            </span>
          </li>
        </ul>
      
        
          <li>
            <h5 data-part="4" class="collapsible-header  waves-effect waves-teal">
              Part 4
            </h5>
            <div class="collapsible-body">
        
        <ul>
          <li class="collection-li">
            <span>1.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-intro"
              >Introduction</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>2.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-e2e-test-setup"
              >End-to-End Test Setup</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>3.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-e2e-test-specs"
              >End-to-End Test Specs</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>4.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-react-component-refactor"
              >React Component Refactor</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>5.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-react-form-validation"
              >React Form Validation</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>6.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-react-flash-messages"
              >React Flash Messaging</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>7.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-swagger-setup"
              >Swagger Setup</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>8.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-staging-environment"
              >Staging Environment</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>9.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-four-workflow"
              >Workflow</a>
            </span>
          </li>
        </ul>
      
        
          <li>
            <h5 data-part="5" class="collapsible-header  waves-effect waves-teal">
              Part 5
            </h5>
            <div class="collapsible-body">
        
        <ul>
          <li class="collection-li">
            <span>1.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-intro"
              >Introduction</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>2.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-docker-hub"
              >Docker Hub</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>3.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-ec2-container-registry"
              >EC2 Container Registry</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>4.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-ec2-container-service"
              >EC2 Container Service</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>5.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-elastic-load-balancing"
              >Elastic Load Balancing</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>6.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-ec2-container-service-staging"
              >ECS Staging</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>7.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-ec2-relational-database-service"
              >Setting up RDS</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>8.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-ec2-container-service-production"
              >ECS Production</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>9.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-five-workflow"
              >Workflow</a>
            </span>
          </li>
        </ul>
      
        
          <li>
            <h5 data-part="6" class="collapsible-header  waves-effect waves-teal">
              Part 6
            </h5>
            <div class="collapsible-body">
        
        <ul>
          <li class="collection-li">
            <span>1.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-intro"
              >Introduction</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>2.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-eval-service-setup"
              >Eval Service Setup</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>3.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-scores-api-database"
              >Scores API Database</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>4.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-scores-api-routes"
              >Scores API Routes</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>5.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-exercises-api"
              >Exercises API</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>6.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-react-refactor"
              >React Refactor</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>7.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-e2e-tests-refactor"
              >End-to-End Tests Refactor</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>8.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-react-ace-code-editor"
              >React Ace Code Editor</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>9.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-code-evaluation"
              >Code Evaluation</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>10.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-ecs-deployment"
              >ECS Deployment</a>
            </span>
          </li>
        </ul>
      
        
        <ul>
          <li class="collection-li">
            <span>11.&nbsp;</span>
            <span>
              <a
                class="collection-item"
                href="/part-six-next-steps"
              >Next Steps</a>
            </span>
          </li>
        </ul>
      
    </div>
  </li>
    </ul>
  </div>
</div>


        <div class="col m9 hide-on-small-and-down">

          <h2>Docker Code Eval</h2>

          


          <p>In this lesson, we&#39;ll test-drive the actual code evaluation portion of the new  service....</p>

<hr>

<p>To make development a bit easier, let&#39;s build this outside of Docker Compose. Navigate to <em>flask-microservices-eval</em>, and then create and active a new virtual environment:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>python3.6 -m venv env
<span class="nv">$ </span><span class="nb">source </span>env/bin/activate
</code></pre></div>
<p>Install the dependencies:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>pip install -r requirements.txt
</code></pre></div>
<p>To safely run arbitrary, user-supplied code, we&#39;ll use the <a href="http://docker-py.readthedocs.io/en/2.5.1/">Docker Python SDK</a> to create a new container to execute the code in.</p>

<p>Install:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>pip install <span class="nv">docker</span><span class="o">==</span>2.5.1
<span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>pip freeze &gt; requirements.txt
</code></pre></div>
<p>Now, let&#39;s write some tests!</p>

<h4 id="test-1"><span style="font-family:'Montserrat', 'sans-serif';">Test 1</span></h4>

<p><em>Request</em></p>

<ol>
<li>URL: <code>/eval</code></li>
<li>HTTP method: <code>POST</code></li>
<li>Payload: <code>{ code: &#39;print(&quot;Hello, World!&quot;)&#39; }</code></li>
</ol>

<p><em>Response</em></p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;success&quot;</span><span class="p">,</span>
  <span class="nt">&quot;output&quot;</span><span class="p">:</span> <span class="s2">&quot;Hello, World!&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>Add the following test to the <code>TestEvalBlueprint</code> class in <em>project/tests/test_eval.py</em>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Ensure the /eval route behaves correctly.&quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="s">&#39;print(&quot;Hello, World!&quot;)&#39;</span><span class="p">)),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;success&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;Hello, World!&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span> <span class="o">==</span> <span class="s">&#39;application/json&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</code></pre></div>
<p>Run the test to ensure it fails:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>python manage.py <span class="nb">test</span>
</code></pre></div>
<p>Then, add the route handler to <em>project/api/eval.py</em>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="nd">@eval_blueprint.route</span><span class="p">(</span><span class="s">&#39;/eval&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="nd">@authenticate</span>
<span class="k">def</span> <span class="nf">eval</span><span class="p">():</span>
    <span class="c"># get post data</span>
    <span class="n">post_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">post_data</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Invalid payload.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">400</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">post_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;code&#39;</span><span class="p">)</span>
    <span class="n">code</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">StringIO</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c"># execute the code</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">container_name</span> <span class="o">=</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()</span><span class="o">.</span><span class="n">hex</span>
        <span class="n">create_container</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">container_name</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">get_output</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;success&#39;</span><span class="p">,</span>
            <span class="s">&#39;output&#39;</span><span class="p">:</span> <span class="n">output</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
        <span class="p">})</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Something bad happened. Please try again.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">500</span>
</code></pre></div>
<p>Essentially, we parse the request object, grabbing the code, and store it in memory with <a href="https://docs.python.org/3/library/io.html#io.StringIO">StringIO</a>. Then, we create a random container name and pass it along with the code to a function called <code>create_container</code>. Finally, we get the results from the container via the <code>get_output</code> function and send it back to the client.</p>

<p>Create a new file in &quot;project/api&quot; called <em>docker_service.py</em>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="kn">from</span> <span class="nn">docker</span> <span class="kn">import</span> <span class="n">APIClient</span>


<span class="n">client</span> <span class="o">=</span> <span class="n">APIClient</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="s">&#39;unix://var/run/docker.sock&#39;</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">create_container</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">container_name</span><span class="p">):</span>
    <span class="n">client</span><span class="o">.</span><span class="n">create_container</span><span class="p">(</span>
        <span class="n">image</span><span class="o">=</span><span class="s">&#39;python:latest&#39;</span><span class="p">,</span>
        <span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;/usr/bin/python&#39;</span><span class="p">,</span> <span class="s">&#39;-c&#39;</span><span class="p">,</span> <span class="n">code</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()],</span>
        <span class="n">volumes</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;/opt&#39;</span><span class="p">],</span>
        <span class="n">host_config</span><span class="o">=</span><span class="n">client</span><span class="o">.</span><span class="n">create_host_config</span><span class="p">(</span>
            <span class="n">binds</span><span class="o">=</span><span class="p">{</span>
                <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">():</span> <span class="p">{</span>
                    <span class="s">&#39;bind&#39;</span><span class="p">:</span> <span class="s">&#39;/opt&#39;</span><span class="p">,</span>
                    <span class="s">&#39;mode&#39;</span><span class="p">:</span> <span class="s">&#39;rw&#39;</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">),</span>
        <span class="n">name</span><span class="o">=</span><span class="n">container_name</span><span class="p">,</span>
        <span class="n">working_dir</span><span class="o">=</span><span class="s">&#39;/opt&#39;</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="bp">True</span>


<span class="k">def</span> <span class="nf">get_output</span><span class="p">(</span><span class="n">container_name</span><span class="p">):</span>
    <span class="n">client</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
    <span class="n">client</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
    <span class="n">output</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">logs</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
    <span class="n">client</span><span class="o">.</span><span class="n">remove_container</span><span class="p">(</span><span class="n">container_name</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">output</span>
</code></pre></div>
<p>First, we create a new instance of the <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html">APIClient</a>, passing in the URL to the local Docker server. Take note of the functions:</p>

<ol>
<li>The <code>create_container</code> function should be fairly straightforward: We simply create a new Docker container from the latest <a href="https://hub.docker.com/_/python/">Python image</a> and pass in the code to be ran - i.e, <code>/usr/bin/python -c print(&#39;Hello, World!&#39;)</code>.</li>
<li>Within <code>get_output()</code>, we <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html#docker.api.container.ContainerApiMixin.start">spin</a> up the container, <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html#docker.api.container.ContainerApiMixin.wait">wait</a> for it to stop, grab and return the <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html#docker.api.container.ContainerApiMixin.logs">logs</a>, and <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html#docker.api.container.ContainerApiMixin.remove_container">remove</a> the container.</li>
</ol>

<p>Add the import to <em>project/api/eval.py</em>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">project.api.docker_service</span> <span class="kn">import</span> <span class="n">create_container</span><span class="p">,</span> <span class="n">get_output</span>
</code></pre></div>
<p>Run the tests. They should pass.</p>

<h4 id="test-2"><span style="font-family:'Montserrat', 'sans-serif';">Test 2</span></h4>

<p>What if there&#39;s a syntax error in the submitted code?</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint_handles_syntax_errors</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Ensure the /eval route returns a syntax error properly.&quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="s">&#39;print(&quot;Hello, World! &#39;</span><span class="p">)),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;success&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;Hello, World!&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span>
            <span class="s">&#39;SyntaxError: EOL while scanning string literal&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span> <span class="o">==</span> <span class="s">&#39;application/json&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</code></pre></div>
<p>Run the test. It should already pass!</p>

<h4 id="test-3"><span style="font-family:'Montserrat', 'sans-serif';">Test 3</span></h4>

<p>What if the end user submits JavaScript rather than Python?</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint_handles_name_errors</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Ensure the /eval route returns a name error properly.&quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="s">&#39;console.log(&quot;Hello, World!&quot;)&#39;</span><span class="p">)),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;success&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;Hello, World!&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span>
            <span class="s">&quot;NameError: name &#39;console&#39; is not defined&quot;</span><span class="p">,</span>
            <span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span> <span class="o">==</span> <span class="s">&#39;application/json&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</code></pre></div>
<p>Again, this should already pass!</p>

<h4 id="test-4"><span style="font-family:'Montserrat', 'sans-serif';">Test 4</span></h4>

<p>Test:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint_invalid_json</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">()),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s">&#39;Invalid payload.&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;message&#39;</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">])</span>
</code></pre></div>
<p>Does it pass?</p>

<h4 id="test-5"><span style="font-family:'Montserrat', 'sans-serif';">Test 5</span></h4>

<p>Test:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint_no_code</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s">&#39;Invalid payload.&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;message&#39;</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">])</span>
</code></pre></div>
<p>This should fail.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="nd">@eval_blueprint.route</span><span class="p">(</span><span class="s">&#39;/eval&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="nd">@authenticate</span>
<span class="k">def</span> <span class="nf">eval</span><span class="p">():</span>
    <span class="c"># get post data</span>
    <span class="n">post_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">post_data</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Invalid payload.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">400</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">post_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;code&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Invalid payload.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">400</span>
    <span class="n">code</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">StringIO</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c"># execute the code</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">container_name</span> <span class="o">=</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()</span><span class="o">.</span><span class="n">hex</span>
        <span class="n">create_container</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">container_name</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">get_output</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;success&#39;</span><span class="p">,</span>
            <span class="s">&#39;output&#39;</span><span class="p">:</span> <span class="n">output</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
        <span class="p">})</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Something bad happened. Please try again.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">500</span>
</code></pre></div>
<h4 id="code-coverage"><span style="font-family:'Montserrat', 'sans-serif';">Code Coverage</span></h4>

<p>Where are we at in terms of code coverage?</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>python manage.py cov
</code></pre></div>
<p>Coverage:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">----------------------------------------------------------------------
Ran <span class="m">10</span> tests in 4.855s

OK
Coverage Summary:
Name                            Stmts   Miss Branch BrPart  Cover
-----------------------------------------------------------------
project/__init__.py                <span class="m">11</span>      <span class="m">4</span>      <span class="m">0</span>      <span class="m">0</span>    64%
project/api/__init__.py             <span class="m">0</span>      <span class="m">0</span>      <span class="m">0</span>      <span class="m">0</span>   100%
project/api/docker_service.py      <span class="m">12</span>      <span class="m">0</span>      <span class="m">0</span>      <span class="m">0</span>   100%
project/api/eval.py                <span class="m">28</span>      <span class="m">3</span>      <span class="m">4</span>      <span class="m">0</span>    91%
project/api/utils.py               <span class="m">31</span>     <span class="m">10</span>      <span class="m">8</span>      <span class="m">2</span>    64%
project/config.py                  <span class="m">14</span>      <span class="m">0</span>      <span class="m">0</span>      <span class="m">0</span>   100%
-----------------------------------------------------------------
TOTAL                              <span class="m">96</span>     <span class="m">17</span>     <span class="m">12</span>      <span class="m">2</span>    81%
</code></pre></div>
<h4 id="check-your-understanding"><span style="font-family:'Montserrat', 'sans-serif';">Check Your Understanding</span></h4>

<p>Add more test cases. Increase the code coverage. Email me your results for a surprise!</p>


          <div class="page-nav">
            
            
          </div>

          
  <br>
  <a class="twitter-share-button" data-show-count="false" href="https://twitter.com/intent/tweet?text=Microservices with Docker, Flask, and React - Docker Code Eval&amp;url=http%3A%2F%2Ftestdriven.io/part-six-docker-code-eval&amp;via=RealPython" rel="nofollow" target="_blank" title="Share on Twitter"></a><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>



        </div>

        <div class="hide-on-med-and-up">

          <h2>Docker Code Eval</h2>

          <p>In this lesson, we&#39;ll test-drive the actual code evaluation portion of the new  service....</p>

<hr>

<p>To make development a bit easier, let&#39;s build this outside of Docker Compose. Navigate to <em>flask-microservices-eval</em>, and then create and active a new virtual environment:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>python3.6 -m venv env
<span class="nv">$ </span><span class="nb">source </span>env/bin/activate
</code></pre></div>
<p>Install the dependencies:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>pip install -r requirements.txt
</code></pre></div>
<p>To safely run arbitrary, user-supplied code, we&#39;ll use the <a href="http://docker-py.readthedocs.io/en/2.5.1/">Docker Python SDK</a> to create a new container to execute the code in.</p>

<p>Install:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>pip install <span class="nv">docker</span><span class="o">==</span>2.5.1
<span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>pip freeze &gt; requirements.txt
</code></pre></div>
<p>Now, let&#39;s write some tests!</p>

<h4 id="test-1"><span style="font-family:'Montserrat', 'sans-serif';">Test 1</span></h4>

<p><em>Request</em></p>

<ol>
<li>URL: <code>/eval</code></li>
<li>HTTP method: <code>POST</code></li>
<li>Payload: <code>{ code: &#39;print(&quot;Hello, World!&quot;)&#39; }</code></li>
</ol>

<p><em>Response</em></p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;success&quot;</span><span class="p">,</span>
  <span class="nt">&quot;output&quot;</span><span class="p">:</span> <span class="s2">&quot;Hello, World!&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>Add the following test to the <code>TestEvalBlueprint</code> class in <em>project/tests/test_eval.py</em>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Ensure the /eval route behaves correctly.&quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="s">&#39;print(&quot;Hello, World!&quot;)&#39;</span><span class="p">)),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;success&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;Hello, World!&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span> <span class="o">==</span> <span class="s">&#39;application/json&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</code></pre></div>
<p>Run the test to ensure it fails:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>python manage.py <span class="nb">test</span>
</code></pre></div>
<p>Then, add the route handler to <em>project/api/eval.py</em>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="nd">@eval_blueprint.route</span><span class="p">(</span><span class="s">&#39;/eval&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="nd">@authenticate</span>
<span class="k">def</span> <span class="nf">eval</span><span class="p">():</span>
    <span class="c"># get post data</span>
    <span class="n">post_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">post_data</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Invalid payload.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">400</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">post_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;code&#39;</span><span class="p">)</span>
    <span class="n">code</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">StringIO</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c"># execute the code</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">container_name</span> <span class="o">=</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()</span><span class="o">.</span><span class="n">hex</span>
        <span class="n">create_container</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">container_name</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">get_output</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;success&#39;</span><span class="p">,</span>
            <span class="s">&#39;output&#39;</span><span class="p">:</span> <span class="n">output</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
        <span class="p">})</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Something bad happened. Please try again.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">500</span>
</code></pre></div>
<p>Essentially, we parse the request object, grabbing the code, and store it in memory with <a href="https://docs.python.org/3/library/io.html#io.StringIO">StringIO</a>. Then, we create a random container name and pass it along with the code to a function called <code>create_container</code>. Finally, we get the results from the container via the <code>get_output</code> function and send it back to the client.</p>

<p>Create a new file in &quot;project/api&quot; called <em>docker_service.py</em>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="kn">from</span> <span class="nn">docker</span> <span class="kn">import</span> <span class="n">APIClient</span>


<span class="n">client</span> <span class="o">=</span> <span class="n">APIClient</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="s">&#39;unix://var/run/docker.sock&#39;</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">create_container</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">container_name</span><span class="p">):</span>
    <span class="n">client</span><span class="o">.</span><span class="n">create_container</span><span class="p">(</span>
        <span class="n">image</span><span class="o">=</span><span class="s">&#39;python:latest&#39;</span><span class="p">,</span>
        <span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;/usr/bin/python&#39;</span><span class="p">,</span> <span class="s">&#39;-c&#39;</span><span class="p">,</span> <span class="n">code</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()],</span>
        <span class="n">volumes</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;/opt&#39;</span><span class="p">],</span>
        <span class="n">host_config</span><span class="o">=</span><span class="n">client</span><span class="o">.</span><span class="n">create_host_config</span><span class="p">(</span>
            <span class="n">binds</span><span class="o">=</span><span class="p">{</span>
                <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">():</span> <span class="p">{</span>
                    <span class="s">&#39;bind&#39;</span><span class="p">:</span> <span class="s">&#39;/opt&#39;</span><span class="p">,</span>
                    <span class="s">&#39;mode&#39;</span><span class="p">:</span> <span class="s">&#39;rw&#39;</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">),</span>
        <span class="n">name</span><span class="o">=</span><span class="n">container_name</span><span class="p">,</span>
        <span class="n">working_dir</span><span class="o">=</span><span class="s">&#39;/opt&#39;</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="bp">True</span>


<span class="k">def</span> <span class="nf">get_output</span><span class="p">(</span><span class="n">container_name</span><span class="p">):</span>
    <span class="n">client</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
    <span class="n">client</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
    <span class="n">output</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">logs</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
    <span class="n">client</span><span class="o">.</span><span class="n">remove_container</span><span class="p">(</span><span class="n">container_name</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">output</span>
</code></pre></div>
<p>First, we create a new instance of the <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html">APIClient</a>, passing in the URL to the local Docker server. Take note of the functions:</p>

<ol>
<li>The <code>create_container</code> function should be fairly straightforward: We simply create a new Docker container from the latest <a href="https://hub.docker.com/_/python/">Python image</a> and pass in the code to be ran - i.e, <code>/usr/bin/python -c print(&#39;Hello, World!&#39;)</code>.</li>
<li>Within <code>get_output()</code>, we <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html#docker.api.container.ContainerApiMixin.start">spin</a> up the container, <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html#docker.api.container.ContainerApiMixin.wait">wait</a> for it to stop, grab and return the <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html#docker.api.container.ContainerApiMixin.logs">logs</a>, and <a href="http://docker-py.readthedocs.io/en/2.5.1/api.html#docker.api.container.ContainerApiMixin.remove_container">remove</a> the container.</li>
</ol>

<p>Add the import to <em>project/api/eval.py</em>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">project.api.docker_service</span> <span class="kn">import</span> <span class="n">create_container</span><span class="p">,</span> <span class="n">get_output</span>
</code></pre></div>
<p>Run the tests. They should pass.</p>

<h4 id="test-2"><span style="font-family:'Montserrat', 'sans-serif';">Test 2</span></h4>

<p>What if there&#39;s a syntax error in the submitted code?</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint_handles_syntax_errors</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Ensure the /eval route returns a syntax error properly.&quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="s">&#39;print(&quot;Hello, World! &#39;</span><span class="p">)),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;success&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;Hello, World!&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span>
            <span class="s">&#39;SyntaxError: EOL while scanning string literal&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span> <span class="o">==</span> <span class="s">&#39;application/json&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</code></pre></div>
<p>Run the test. It should already pass!</p>

<h4 id="test-3"><span style="font-family:'Montserrat', 'sans-serif';">Test 3</span></h4>

<p>What if the end user submits JavaScript rather than Python?</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint_handles_name_errors</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Ensure the /eval route returns a name error properly.&quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="s">&#39;console.log(&quot;Hello, World!&quot;)&#39;</span><span class="p">)),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;success&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;Hello, World!&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span>
            <span class="s">&quot;NameError: name &#39;console&#39; is not defined&quot;</span><span class="p">,</span>
            <span class="n">data</span><span class="p">[</span><span class="s">&#39;output&#39;</span><span class="p">]</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span> <span class="o">==</span> <span class="s">&#39;application/json&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</code></pre></div>
<p>Again, this should already pass!</p>

<h4 id="test-4"><span style="font-family:'Montserrat', 'sans-serif';">Test 4</span></h4>

<p>Test:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint_invalid_json</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">()),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s">&#39;Invalid payload.&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;message&#39;</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">])</span>
</code></pre></div>
<p>Does it pass?</p>

<h4 id="test-5"><span style="font-family:'Montserrat', 'sans-serif';">Test 5</span></h4>

<p>Test:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_eval_endpoint_no_code</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="s">&#39;/eval&#39;</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)),</span>
            <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/json&#39;</span><span class="p">,</span>
            <span class="n">headers</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">Authorization</span><span class="o">=</span><span class="s">&#39;Bearer test&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s">&#39;Invalid payload.&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;message&#39;</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">])</span>
</code></pre></div>
<p>This should fail.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="nd">@eval_blueprint.route</span><span class="p">(</span><span class="s">&#39;/eval&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="nd">@authenticate</span>
<span class="k">def</span> <span class="nf">eval</span><span class="p">():</span>
    <span class="c"># get post data</span>
    <span class="n">post_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">post_data</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Invalid payload.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">400</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">post_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;code&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Invalid payload.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">400</span>
    <span class="n">code</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">StringIO</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c"># execute the code</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">container_name</span> <span class="o">=</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()</span><span class="o">.</span><span class="n">hex</span>
        <span class="n">create_container</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">container_name</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">get_output</span><span class="p">(</span><span class="n">container_name</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;success&#39;</span><span class="p">,</span>
            <span class="s">&#39;output&#39;</span><span class="p">:</span> <span class="n">output</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
        <span class="p">})</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">response_object</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;error&#39;</span><span class="p">,</span>
            <span class="s">&#39;message&#39;</span><span class="p">:</span> <span class="s">&#39;Something bad happened. Please try again.&#39;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_object</span><span class="p">),</span> <span class="mi">500</span>
</code></pre></div>
<h4 id="code-coverage"><span style="font-family:'Montserrat', 'sans-serif';">Code Coverage</span></h4>

<p>Where are we at in terms of code coverage?</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">(</span>env<span class="o">)</span><span class="nv">$ </span>python manage.py cov
</code></pre></div>
<p>Coverage:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">----------------------------------------------------------------------
Ran <span class="m">10</span> tests in 4.855s

OK
Coverage Summary:
Name                            Stmts   Miss Branch BrPart  Cover
-----------------------------------------------------------------
project/__init__.py                <span class="m">11</span>      <span class="m">4</span>      <span class="m">0</span>      <span class="m">0</span>    64%
project/api/__init__.py             <span class="m">0</span>      <span class="m">0</span>      <span class="m">0</span>      <span class="m">0</span>   100%
project/api/docker_service.py      <span class="m">12</span>      <span class="m">0</span>      <span class="m">0</span>      <span class="m">0</span>   100%
project/api/eval.py                <span class="m">28</span>      <span class="m">3</span>      <span class="m">4</span>      <span class="m">0</span>    91%
project/api/utils.py               <span class="m">31</span>     <span class="m">10</span>      <span class="m">8</span>      <span class="m">2</span>    64%
project/config.py                  <span class="m">14</span>      <span class="m">0</span>      <span class="m">0</span>      <span class="m">0</span>   100%
-----------------------------------------------------------------
TOTAL                              <span class="m">96</span>     <span class="m">17</span>     <span class="m">12</span>      <span class="m">2</span>    81%
</code></pre></div>
<h4 id="check-your-understanding"><span style="font-family:'Montserrat', 'sans-serif';">Check Your Understanding</span></h4>

<p>Add more test cases. Increase the code coverage. Email me your results for a surprise!</p>


          
  <br>
  <a class="twitter-share-button" data-show-count="false" href="https://twitter.com/intent/tweet?text=Microservices with Docker, Flask, and React - Docker Code Eval&amp;url=http%3A%2F%2Ftestdriven.io/part-six-docker-code-eval&amp;via=RealPython" rel="nofollow" target="_blank" title="Share on Twitter"></a><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>



          <div class="page-nav">
            
            
          </div>

        </div>

      </div>
    </div>

     <footer class="page-footer white">
  <div class="container footer-container center-align">
    <ul>
      <li><small>Content by Michael Herman (michael@mherman.org)</small></li>
      <li><small>&copy; Copyright 2017 <a href="http://testdriven.io">TestDriven.io</a></small></li>
    </ul>
  </div>
</footer>


    <script type="text/javascript" src="//code.jquery.com/jquery-2.1.1.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>

    
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-100160465-1', 'auto');
    ga('send', 'pageview');

  </script>



  </body>
</html>
